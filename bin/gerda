#!/usr/bin/env python

import json
import logging
import re
import string
import subprocess
import sys

import argparse

if sys.version < '3':
    from urlparse import urlparse  # noqa
else:
    from urllib.parse import urlparse  # noqa


LOG = logging.getLogger('gerda')

REMOTE_NAME = 'gerrit'


class CommandFailed(RuntimeError):

    def __init__(self, cmdline, code, stdout, stderr):
        message = "Command %s failed, return code = %s" % (cmdline[0], code)
        super(RuntimeError, self).__init__(message)
        self.cmdline = cmdline
        self.code = code
        self.stdout = stdout
        self.stderr = stderr

    def __str__(self):
        result = '%s\nCommand line: %s' % (
            self.message, subprocess.list2cmdline(self.cmdline))
        if self.stdout:
            result += ('\n---<<< Begin captured STDOUT >>>---\n%s'
                       '---<<< End captured STDOUT >>>---\n' % self.stdout)
        if self.stderr:
            result += ('\n---<<< Begin captured STDERR >>>---\n%s'
                       '---<<< End captured STDERR >>>---\n' % self.stderr)
        return result


class Colorizer(object):
    """Very simple and unportable output colorizer."""

    _ESC_SEQS = {
        'reset': '\033[0m',
        'bold': '\033[1m',
        'red': '\033[31m',
        'green': '\033[32m'
    }

    def __init__(self, mode='auto'):
        if mode == 'auto':
            self.colorize = sys.stdout.isatty()
        elif mode == 'always':
            self.colorize = True
        elif mode == 'never':
            self.colorize = False
        else:
            raise ValueError('Invalid mode: %r' % mode)

    def quote(self, arg, color):
        if not self.colorize:
            return arg
        try:
            return u'%s%s%s' % (self._ESC_SEQS[color],
                                arg,
                                self._ESC_SEQS['reset'])
        except KeyError as e:
            raise ValueError('Unknown color: %s' % e)

    def quote_approval(self, approval, how):
        if how == '+':
            return self.quote(approval, 'green')
        if how == '-':
            return self.quote(approval, 'red')
        return approval


def run_command(*args, **kwargs):
    encoding = kwargs.pop('encoding', 'utf-8')
    cmdline = [str(arg) for arg in args]

    LOG.debug('Executing %s', subprocess.list2cmdline(cmdline))

    obj = subprocess.Popen(cmdline,
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE)
    output = obj.communicate()
    rc = obj.wait()
    if rc != 0:
        exc = CommandFailed(cmdline, rc,
                            output[0].decode(encoding),
                            output[1].decode(encoding))
        LOG.debug('%s', exc)
        raise exc
    return output[0].decode(encoding)


def _git(*args, **kwargs):
    strip = kwargs.pop('strip', True)
    cmdline = ('git',) + tuple(args)
    output = run_command(*cmdline, **kwargs)
    if strip:
        output = output.strip()
    return output


def _git_config_get(param):
    try:
        return _git('config', '--get', param)
    except CommandFailed:
        return None


def write_out(*args, **kwargs):
    output = kwargs.pop('output', sys.stdout)
    encoding = kwargs.pop('encoding', 'utf-8')
    for arg in args:
        output.write(arg.encode(encoding))


class Gerrit(object):

    def __init__(self, hostname, username, port):
        userhost = '%s@%s' % (username, hostname)
        self._cmdline_start = ('ssh', '-x', '-p', port, userhost, 'gerrit')
        self.hostname = hostname

    def __call__(self, *args):
        cmdline = self._cmdline_start + tuple(args)
        return run_command(*cmdline).splitlines()

    def query(self, *args):
        command = ('query', '--format=JSON') + tuple(args)
        return [json.loads(line) for line in self(*command)]

    def list_projects(self, *args):
        projects = self('ls-projects')
        if args:
            projects = [project for project in projects
                        if any(arg in project for arg in args)]
        return projects


# taken from git-review, with adjustments
def _parse_git_show(remote=REMOTE_NAME):
    fetch_url = _git_config_get('remote.%s.url' % remote)
    if fetch_url is None:
        return None, None, None, None

    parsed_url = urlparse(fetch_url)
    project_name = parsed_url.path.lstrip("/")
    if project_name.endswith(".git"):
        project_name = project_name[:-4]

    hostname = parsed_url.netloc
    username = None
    port = parsed_url.port

    # Workaround bug in urlparse on OSX
    if parsed_url.scheme == "ssh" and parsed_url.path[:2] == "//":
        hostname = parsed_url.path[2:].split("/")[0]

    if "@" in hostname:
        (username, hostname) = hostname.split("@")
    if ":" in hostname:
        (hostname, port) = hostname.split(":")

    # Is origin an ssh location? Let's pull more info
    if parsed_url.scheme == "ssh" and port is None:
        port = 22

    if port is not None:
        port = str(port)

    return (hostname, username, port, project_name)


def _format_approval(approval):
    value = approval['value']
    if not value.startswith('-'):
        value = '+%s' % value
    try:
        by = approval['by']['username']
    except KeyError:
        by = approval['by']['email']
    return '%s%s(%s)' % (approval['type'][0], value, by)


def _changeset_data(item):
    try:
        approvals = item['currentPatchSet']['approvals']
    except KeyError:
        approvals = []
    try:
        data = dict(subject=item['subject'],
                    owner=item['owner']['name'],
                    status=item['status'],
                    url=item['url'],
                    topic=item.get('topic', ''),
                    ref=item['currentPatchSet']['ref'],
                    approvals=[_format_approval(a) for a in approvals])
        if data['status'] == 'WORKINPROGRESS':
            data['status'] = 'WIP'
    except KeyError:
        LOG.error('Failed to parse data for item %r' % item)
    return data


def _format_changeset(data, color_mode):
    colorizer = Colorizer(color_mode)

    data = data.copy()
    if data['approvals']:
        data['approvals'] = ' '.join(
            colorizer.quote_approval(a, a[1])
            for a in data['approvals']
        ) + '  '
    else:
        data['approvals'] = ''

    data['subject'] = colorizer.quote(data['subject'], 'bold')

    # NOTE(imelnikov): extra spaces make output more readable imo.
    return (u"%(subject)s[%(topic)s] by %(owner)s  %(url)s\n"
            u"  %(status)s  %(approvals)s%(ref)s"
            % data)


def _compile_pattern(pattern):
    flags = 0
    if pattern.lower() == pattern:
        flags = flags | re.IGNORECASE
    return re.compile(pattern, flags)


def list_changesets(options):
    """List subcommand handler."""
    gerrit = Gerrit(options.host, options.user, options.port)
    cmdline = ['--current-patch-set',
               'project:%s' % options.project]
    if not options.all:
        cmdline.append('status:open')
    output = gerrit.query(*cmdline)
    regexps = [_compile_pattern(pattern)
               for pattern in options.patterns]
    for item in output:
        if item.get('type') == 'stats':
            continue
        data = _changeset_data(item)
        if regexps and not all(rex.search(data['subject'])
                               or rex.search(data['topic'])
                               for rex in regexps):
            continue
        write_out(_format_changeset(data, options.color), u'\n')


def _parse_change(change):
    patchset = None

    if change.startswith('refs/changes/'):
        sp = change.split('/')
        if len(sp) not in (4, 5):
            raise ValueError('Invalid change format: %s' % change)
        if sp[2] != sp[3][-2:]:
            raise ValueError('Invalid change format: %s' % change)
        if len(sp) == 5 and sp[4]:
            patchset = sp[4]
        change_num = sp[3]
    elif '/' in change:
        change_num = change.rstrip('/').rsplit('/', 1)[-1]

    if not all(c in string.digits for c in change_num):
        raise ValueError("Invalid change number: %s" % change)
    if patchset is not None:
        try:
            patchset = int(patchset)
        except ValueError:
            raise ValueError('Invalid change %s: bad patchset' % change)
        if patchset <= 0:
            raise ValueError('Invalid change %s: bad patchset' % change)
    return change_num, patchset


def _fetch_changeset(gerrit, change, project=None):
    change_num, patchset = _parse_change(change)

    output = gerrit.query('--current-patch-set', 'change:%s' % change_num)
    items = [item for item in output if 'type' not in item]
    if len(items) != 1:
        if len(items) == 0:
            msg = 'Change %s not found' % change_num
        else:
            msg = 'Got %s changesets for change %s' % (len(changes), change)
        raise RuntimeError(msg)

    item = items[0]
    if project and item['project'] != project:
        raise RuntimeError('Wrong project for change %s: expected %s, got %s'
                           % (change, project, item['project']))

    current_patchset = int(item['currentPatchSet']['number'])
    if patchset is None:
        patchset = current_patchset
    elif patchset > current_patchset:
        raise ValueError('Invalid change %s: bad patchset, current is %s'
                         % (change, current_patchset))

    ref = 'refs/changes/%s/%s/%s' % (change_num[-2:], change_num, patchset)
    LOG.info("Fetching change '%s' from ref %s into FETCH_HEAD",
             item['subject'], ref)
    _git('fetch', REMOTE_NAME, ref)


def fetch_changeset(options):
    """Fetch subcommand handler."""
    gerrit = Gerrit(options.host, options.user, options.port)
    change = options.changeset[0]
    _fetch_changeset(gerrit, change, options.project)


def _check_commit_uploaded(gerrit, sha):
    # Maybe it's one of uploaded patchsets?

    items = [item for item in gerrit.query(sha)
             if 'type' not in item]
    if len(items) > 1:
        raise RuntimeError('Got %s changesets for sha %s, strange'
                           % (len(items), sha))
    if len(items) == 1:
        return True

    # Maybe it's other commit from current branch?
    try:
        current_branch = _git('symbolic-ref', '--short', 'HEAD')
        _git('fetch', REMOTE_NAME, current_branch)
        merge_base = _git('merge-base', sha, 'FETCH_HEAD')
    except CommandFailed:
        return False
    return merge_base == sha


def reset_to_changeset(options):
    """Reset-to command handler."""
    gerrit = Gerrit(options.host, options.user, options.port)

    # 1. Test current repository is clean
    try:
        unclean = _git('status', '--porcelain')
    except CommandFailed as e:
        unclean = str(e)
    if unclean:
        raise RuntimeError('We are not in clean git repository:'
                           '\n%s' % unclean)

    # 2. Check that current change were put to gerrit
    head_sha = _git('rev-parse', 'HEAD')
    if not _check_commit_uploaded(gerrit, head_sha):
        raise RuntimeError('Looks like your current code'
                           'is not in gerrit yet')

    # 3. Fetch changeset
    gerrit = Gerrit(options.host, options.user, options.port)
    change = options.changeset[0]
    _fetch_changeset(gerrit, change, options.project)

    # 4. Hard-reset to it!
    LOG.info('Doing HARD RESET to fetched change')
    write_out(_git('reset', '--hard', 'FETCH_HEAD', strip=False))


def dump_config(options):
    opts = vars(options)
    for param in ('host', 'port', 'project', 'user'):
        write_out(u'%s: %s\n' % (param, opts[param]))


def list_projects(options):
    gerrit = Gerrit(options.host, options.user, options.port)
    projects = gerrit.list_projects(*options.patterns)
    write_out(u'\n'.join(projects), u'\n')


def _expand_project(options):
    gerrit = Gerrit(options.host, options.user, options.port)
    relevant_projects = gerrit.list_projects(options.project)
    if not relevant_projects:
        raise ValueError('Project not found: %s' % options.project)
    if len(relevant_projects) == 1:
        return relevant_projects[0]
    if options.project in relevant_projects:
        return options.project

    slashp = '/' + options.project
    for p in relevant_projects:
        if p.endswith(slashp):
            return p
    raise ValueError('Ambitious project %s, can be one of: %s'
                     % (options.project, ' '.join(relevant_projects)))


def _parse_arguments(args):
    # try to derive gerrit url from git
    host, user, port, project = _parse_git_show()

    host = host or 'review.openstack.org'
    user = user or _git_config_get('gitreview.username')
    port = port or 29418

    parser = argparse.ArgumentParser(prog=args[0])
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='verbose operation')
    parser.add_argument('--host', '-H', default=host,
                        help='Gerrit hostname')
    parser.add_argument('--user', '-U', default=user,
                        required=(user is None),
                        help='Gerrit username')
    parser.add_argument('--port', '-P', default=port, type=int,
                        help='Gerrit SSH port')
    subparsers = parser.add_subparsers(title='subcommands')

    # list subcommand
    parser_list = subparsers.add_parser('list', help='list changesets')
    parser_list.set_defaults(func=list_changesets, operation='List')
    parser_list.add_argument('--project', '-p', default=project,
                             required=(project is None),
                             help='Gerrit project')
    parser_list.add_argument('--all', default=False, action='store_true',
                             help='Display all (not just open) changes')
    parser_list.add_argument('--color', '-c', default='auto',
                             choices=['auto', 'never', 'always'],
                             help='Colorize output')
    parser_list.add_argument(
        'patterns', metavar='PATTERN', nargs='*',
        help='Display only changes with matching topic or subject')

    # fetch subcommand
    parser_fetch = subparsers.add_parser('fetch', help='fetch changeset')
    parser_fetch.set_defaults(func=fetch_changeset, operation='Fetch')
    parser_fetch.add_argument('--project', '-p', default=project,
                              required=(project is None),
                              help='Gerrit project')
    parser_fetch.add_argument('changeset', nargs=1,
                              help='Change number or url')

    # reset-to subcommand
    parser_reset_to = subparsers.add_parser('reset-to',
                                         help='hard reset to changeset')
    parser_reset_to.set_defaults(func=reset_to_changeset,
                                 operation='Reset-to')
    parser_reset_to.add_argument('--project', '-p', default=project,
                                 required=(project is None),
                                 help='Gerrit project')
    parser_reset_to.add_argument('changeset', nargs=1,
                                 help='Change number or url')

    # projects subcommand
    parser_projects = subparsers.add_parser('ls-projects',
                                            help='list projects')
    parser_projects.set_defaults(func=list_projects, operation='Projects')
    parser_projects.add_argument(
        'patterns', metavar='PATTERN', nargs='*',
        help='Display only changes with topic or subject containing pattern')

    # dump-config subcommand
    parser_dump = subparsers.add_parser('dump-config',
                                        help='print out configuration')
    parser_dump.set_defaults(func=dump_config, operation='Dump config')
    parser_dump.add_argument('--project', '-p', default=project,
                             help='Gerrit project')

    options = parser.parse_args(args[1:])
    project_option = getattr(options, 'project', None)
    options.expand_project = (project_option is not None
                              and project != project_option)
    return options


def _setup_logging(verbose):
    """Initialize logging."""
    # setup logging -- put messages to stderr
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))

    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG if verbose else logging.INFO)
    root_logger.addHandler(handler)


def main(args):
    try:
        options = _parse_arguments(args)
    except Exception as e:
        write_out(u'Initialization failed: %s\n' % e)
        return 1

    try:
        _setup_logging(options.verbose)
    except Exception as e:
        write_out(u'Initialization failed: %s\n' % e)
        return 1

    try:
        if options.expand_project:
            options.project = _expand_project(options)
        return options.func(options) or 0
    except Exception as e:
        if options.verbose:
            LOG.exception("%s failed", options.operation)
        else:
            LOG.error("%s failed: %s", options.operation, e)
        return 1


if __name__ == '__main__':
    sys.exit(main(sys.argv))
